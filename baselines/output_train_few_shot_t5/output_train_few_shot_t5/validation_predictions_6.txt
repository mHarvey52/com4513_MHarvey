< extra_id_0 > table 2 : throughput for processing the treelstm model on our recursive framework , fold ’ s folding technique , and tensorflow ’ s iterative approach , with the large movie review dataset . the recursive framework performs the best on inference with efficient parallel execution of tree nodes , while fold ’ s folding technique shows better performance on training thanks to its gpu exploitation .
< extra_id_0 > table 1 : throughput for the treernn model implemented with recursive dataflow graphs , using datasets of varying tree balancedness . the balanced dataset exhibits highest throughput thanks to the high degree of parallelization , but at the same time does not improve as well as the linear dataset when the batch size increases from 1 to 25 .
< extra_id_0 > in table 2 . the max pooling strategy consistently performs better in all model variations . the max pooling strategy consistently performs better in all model variations . the max pooling strategy consistently performs better in all model variations . the max pooling strategy consistently performs better in all model variations . the max pooling strategy consistently performs better in all model variations .
< extra_id_0 > [ bold ] best f1 ( in 5 - fold ) without sdp c > [ bold ] best f1 ( in 5 - fold ) with sdp c > [ bold ] best f1 ( in 5 - fold ) without sdp c > [ bold ] best f1 ( in 5 - fold ) without sdp c > [ bold ] best f1 ( in 5 - fold ) without sdp c > [ bold ] best f1 ( in 5 - fold ) with sdp c > [ bold c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c >
< extra_id_0 > c - f1 100 % c - f1 50 % c - f1 100 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 100 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 100 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1 50 % c - f1
< extra_id_0 > r - f1 and r - f1 are the same as the paragraph level acc . c > paragraph level acc . c > paragraph level acc . c > paragraph level acc . c > paragraph level acc . c > paragraph level acc . c > paragraph level acc . c > paragraph level acc . c > paragraph level acc . c > paragraph level f1 c >
< extra_id_0 > table 4 shows c - f1 ( 100 % ) in % for the two indicated systems ; essay vs . paragraph level . note that the mean performances are lower than the majority performances over the runs given in table 2 .
< extra_id_0 > bleu c > [ bleu ] c > [ bleu ] c > [ bleu ] c > [ bleu ] c > [ bleu ] c > [ bleu ] c > [ bleu ] c > [ bleu ] c > [ bleu ] c > [ bleu ] c > [ bleu ] c > [ bleu ] c > [ bleu ] c > c >
< extra_id_0 > table 1 shows the comparison between the original e2e data and our cleaned version ( number of distinct mrs , total number of textual references , ser as measured by our slot matching script , see section 3 ) .
< extra_id_0 > bleu c > [ bold ] nist c > [ bold ] rouge - l c > [ bold ] rouge - l c > [ bold ] rouge - l c > [ bold ] rouge - l c > [ bold ] ser c > c > c > c > c > c > c > c > c > c > c >
< extra_id_0 > table 4 shows results of manual error analysis of tgen on a sample of 100 instances from the original test set : total absolute numbers of errors we found ( added , missed , slight disfluencies , slight disfluencies ) .
< extra_id_0 > graphlstm ( song et al . , 2018 ) c > - c > 24 . 4 r > graphlstm ( song et al . , 2018 ) c > - c > 24 . 4 r > graphlstm ( song et al . , 2018 ) c > - c > 24 . 4 r > graphlstm ( song et al . , 2018 ) c > 24 . 4 c > 24 . 4 c > 24 . 4 r > 24 . 4 r > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > 24 . 4 c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c
< extra_id_0 > gcnseq ( damonte and cohen , 2019 ) achieves 24 . 5 bleu points on amr17 . gcnseq ( damonte and cohen , 2019 ) achieves 24 . 5 bleu points on amr17 . gcnseq ( damonte and cohen , 2019 ) achieves 24 . 5 bleu points on amr17 . gcnseq achieves 24 . 5 bleu points on amr17 . gcnseq achieves 24 . 5 bleu points on amr17 .
< extra_id_0 > english - czech # p c > [ bold ] english - czech # p c > [ bold ] english - czech # p c > [ bold ] english - czech # p c > [ bold ] english - czech # p c > [ bold ] english - czech # p c > [ bold ] english - czech # p c > [ bold ] c > [ bold ] c > [ bold ] c > c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c > c >
< extra_id_0 > c > 1 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 3 c > 41 . 9 c > 41 . 9
< extra_id_0 > rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes + rc denotes
< extra_id_0 > 52 . 0 compared to dcgcn ( 1 ) and dcgcn ( 4 ) with a model c > 420 c > 11 . 3m c > 22 . 9m c > 22 . 9m c > 23 . 9m c > [ bold ] 53 . 4m c > [ bold ] 53 . 4m c > [ bold ] 53 . 4m c > [ bold ] 53 . 4m c > [ bold ] 53 . 4m c > [ bold ]
< extra_id_0 > 8 : ablation study for density of connections on the dev set of amr15 . - i dense block denotes removing the dense connections in the i - th block . - i dense block denotes removing the dense connections in the i - th block . - i dense block denotes removing dense connections in the i - th block .
< extra_id_0 > 9 : ablation study for modules used in the graph encoder and the lstm decoder ( table 9 : ablation study for modules used in the graph encoder and the lstm decoder ) ( table 9 : ablation study for modules used in the graph encoder and the lstm decoder ) ( table 9 : ablation study for modules used in the graph encoder and the lstm decoder ) ( table 9 : ablation study for modules used in the graph encoder and lstm
< extra_id_0 > table 7 : scores for initialization strategies on probing tasks . glorot c > 35 . 1 c > 70 . 8 c > wc c > 79 . 7 c > [ bold ] 79 . 7 c > [ bold ] 79 . 7 c > [ bold ] 79 . 7 c > [ bold ] 79 . 7 c > [ bold ] 79 . 7 c > [ bold ] 79 . 7 c >
< extra_id_0 > and topconst c > wc c > wc c > wc c > wc c > wc c > wc c > wc c > wc c > wc c > wc c > wc c > wc c > wc c > wc c > wc c > wc c > wc c > wc c > wc c >
< extra_id_0 > cmow / 784 has 79 . 2 c > [ bold ] 79 . 2 c > [ bold ] 79 . 2 c > [ bold ] 79 . 6 c > [ bold ] 79 . 2 c > [ bold ] 79 . 6 c > [ bold ] 79 . 2 c > [ bold ] 79 . 6 c > [ bold ] 79 . 2 c > [ bold ] 79 . 6 c >
< extra_id_0 > table 3 shows the relative change on unsupervised downstream tasks attained by our models . table 3 shows the relative change on unsupervised downstream tasks attained by our models . cmow c > + 26 . 6 % c > + 44 . 2 % c > + 49 . 7 % c > + 49 . 7 % c > + 49 . 7 % c > + 49 . 7 % .
< extra_id_0 > table 8 : our paper c > [ bold ] 87 . 5 c > [ bold ] 87 . 3 c > [ bold ] 87 . 3 c > [ bold ] 87 . 3 c > [ bold ] 87 . 3 c > [ bold ] 87 . 3 c > [ bold ] 87 . 3 c > [ bold ] 87 . 3 c > [ bold ] 87 . 3 c > [ bold ] 87 . 3 c > [ bold
< extra_id_0 > cmow - c and cmow - c have significantly higher scores than cmow - c and cmow - c on the unsupervised downstream tasks . cmow - c and cmow - c have significantly higher scores on the unsupervised downstream tasks .
< extra_id_0 > has a better wc than cmow - c . cmow - c has a better wc than cmow - c . cmow - c has a better wc than cmow - c . cmow - c has a better wc than cmow - c . cmow - c has better wc than cmow - c .
< extra_id_0 > cmow - c has a better performance than sick - e and sick - b . cmow - c has a better performance than sick - e and sick - b . cmow - c has a better performance than sick - e and sick - b . cmow - c has a better performance than sick - e and sick - b .
< extra_id_0 > all loc c > all org c > all misc c > all misc c > all loc c > all org c > all misc c > mil - nd c > 89 . 46 c > 89 . 46 c > 89 . 46 c > 89 . 46 c > 89 . 46 c > 89 . 46 c > 89 . 46 c >
< extra_id_0 > 69 . 38 compared to 69 . 38 compared to 69 . 38 compared to 69 . 38 compared to 69 . 38 for mil - nd ( model 2 ) and 69 . 38 for mil - nd ( model 2 ) and 69 . 38 for mil - nd ( model 2 ) and 69 . 38 for mil - nd ( model 2 ) and 69 . 38 for mil - nd ( model 2 ) and 69 . 38 for mil - nd ( model 2 ) and 69 . 38 for mil - nd ( model 1 ) , respectively , respectively , respectively .
< extra_id_0 > gen ref gen gen gen gen gen ref gen gen gen gen gen gen ref gen gen gen gen ref gen gen gen gen ref gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen ref gen ref gen gen gen ref gen ref gen ref gen ref gen ref gen ref gen gen ref gen gen gen ref gen gen gen ref gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen gen
< extra_id_0 > compared to s2s - gin and g2s - ggnn , respectively . s2s - gin and g2s - ggnn were significantly better than s2s - gin and g2s - ggnn , respectively .
< extra_id_0 > 3 : results on ldc2015e86 test set when models are trained with additional gigaword data . c > konstas et al . ( 2017 ) c > 200k c > 27 . 40 c > song et al . ( 2018 ) c > 31 . 60 c > c > c > c > c > c > c > c > c > c > c >
< extra_id_0 > 4 shows the results of the ablation study on the ldc2017t10 development set . bilstm c > 22 . 50 c > 30 . 42 c > 57 . 6m c > 57 . 6m c > c > c > c > c > c > c > c > c > c > c > c > c > c > c >
< extra_id_0 >
< extra_id_0 > table 8 shows the fraction of elements in the output that are not present in the input ( added ) and the fraction of elements in the input graph that are missing in the generated sentence ( miss ) , for the test set of ldc2017t10 . the token lemmas are used in the comparison .
< extra_id_0 > table 4 : sem and pos tagging accuracy using features extracted from the 4th nmt encoding layer , trained with different target languages on a smaller parallel corpus ( 200k sentences ) . sem and pos tagging accuracy using features extracted from the nmt encoding layer .
< extra_id_0 > 2 : pos and sem tagging accuracy with baselines and an upper bound . pos and sem tagging accuracy with baselines and an upper bound . pos tagging accuracy with baselines and an upper bound .
< extra_id_0 > and zh c > zh c > zh c > zh c > zh c > zh c > zh c > zh c > zh c > zh c > zh c > zh c > zh c > zh c > zh c > zh c > zh c > zh c > zh c >
< extra_id_0 > table 5 shows pos and sem tagging accuracy with features from different layers of 4 - layer uni / bidirectional / residual nmt encoders , averaged over all non - english target languages . pos and sem tagging accuracy with features from different layers of 4 - layer uni / bidirectional / residual encoders , averaged over all non - english targets .
< extra_id_0 > attacker ’ s performance on different datasets . results are on a training set 10 % held - out . is the difference between the attacker ’ s score and the corresponding adversary ’ s accuracy on different datasets .
< extra_id_0 > c > 67 . 4 c > mention c > 67 . 4 c > mention c > 67 . 4 c > mention c > 67 . 4 c > mention c > 67 . 4 c > mention c > 67 . 4 c > mention c > 67 . 4 c > mention c > 64 . 8 c > mention c >
< extra_id_0 > table 2 : protected attribute leakage : balanced & unbalanced data splits . mention c > 67 . 4 c > 64 . 5 c > 79 . 5 c > 73 . 5 c > 73 . 5 c > 73 . 5 c > 73 . 5 c > 73 . 5 c > 73 . 5 c > 73 . 7 c > 74 . 7 c > 74 . 7 c > 79 . 5 c > 73 . 5 c >
< extra_id_0 > is the difference between the attacker score and the adversary ’ s accuracy . is the difference between the attacker score and the adversary ’ s accuracy . is the difference between the attacker score and the adversary ’ s accuracy . is the difference between the attacker score and the adversary ’ s accuracy .
< extra_id_0 > c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c >
< extra_id_0 > # params c > model c > # params c > yang et al . ( 2018 ) c > yang et al . ( 2018 ) c > yang et al . ( 2018 ) c > yang et al . ( 2018 ) c > yang et al . ( 2018 ) c > yang et al . ( 2018 ) c > yang et al . ( 2018 ) c >
< extra_id_0 > # params c > model c > # params c > # params c > # params c > base time c > + ln acc c > + bert acc c > + ln + bert time c > + ln + bert time c > c > c > c > c > c > c > c > c >
< extra_id_0 > yelppolar err and yelppolar time c > yelppolar time c > yelppolar time c > yelppolar time c > yelppolar time c > yelppolar time c > yelppolar time c > yelppolar time c > yelppolar time c > yelppolar time c > yelppolar time c >
< extra_id_0 > table 3 shows the tokenized bleu score on wmt14 english - german translation task . train : time in seconds per training batch measured from 0 . 2k training steps on tesla p100 . decode : time in milliseconds used to decode one sentence measured in table 3 .
< extra_id_0 > “ # params ” : the parameter number of base . “ # params ” : the parameter number of elmo . rnet * : results published by wang et al . ( 2017 ) .
< extra_id_0 > “ # params ” : the parameter number in conll - 2003 english ner task . “ # params ” : the parameter number in conll - 2003 english ner task .
< extra_id_0 > 7 : test accuracy on snli task with base + ln setting and test perplexity on ptb task with base + ln setting . elrn c > 83 . 56 c > 169 . 81 c > table 7 .
< extra_id_0 > retrieval [ bold ] b - 2 c > [ italic ] w / system retrieval [ bold ] b - 4 c > [ italic ] w / system retrieval [ bold ] # sent c > [ italic ] w / system retrieval [ bold ] r - 2 c > [ italic ] w / system retrieval [ bold ] # word c > [ italic ] w /
< extra_id_0 > the highest standard deviation among automatic systems is highlighted in bold , with statistical significance marked with ( approximation randomization test , p0 . 0005 ) . the highest standard deviation among automatic systems is highlighted in bold , with statistical significance marked with ( approximation randomization test , p0 . 0005 ) . the highest standard deviation among automatic systems is highlighted in bold . the highest standard deviation among automatic systems is highlighted in bold .
< extra_id_0 > tlqs and dlqs . tlqs and dlqs perform better than tlqs and dlqs , respectively . tlqs and dlqs perform better than tlqs and dlqs , respectively .
< extra_id_0 > tlqs and dlqs . tlqs and dlqs perform better than tlqs and dlqs , respectively . tlqs and dlqs perform better than tlqs and dlqs , respectively .
< extra_id_0 > tlqs and dlqs have significantly higher p compared to dlqs and dlqs , respectively . tlqs and dlqs have significantly higher p compared to dlqs and dlqs .
< extra_id_0 > europarl c > 957 c > 901 c > 836 c > 836 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c
< extra_id_0 > avgdepth : 9 . 9 c > 980 c > 984 c > 849 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > 1 c > europar
< extra_id_0 > qt , s and d denote question type , answer score sampling , and hidden dictionary learning , respectively . lf is the enhanced version as we mentioned in table 1 . ndcg % comparison for the experiments of applying our principles on the validation set of visdial v1 . 0 . ndcg % comparison for the experiments of applying our principles .
< extra_id_0 > ndcg % ) of ablative studies on different models on visdial v1 . 0 validation set . p2 indicates the most effective one ( i . e . , hidden dictionary learning ) shown in table 2 .
< extra_id_0 > lv - en c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750 c > 0 . 750
< extra_id_0 > lv - en and zh - en , respectively . bertscore - f1 and bertscore - f1 score better than bertscore - f1 score , respectively .
< extra_id_0 > bold > qual / bold > bold > qual / bold > bold > qual / bold > bold > qual / bold > bold > qual / bold > bold > qual / bold > bold > qual / bold > bold > qual / bold > bold > qual / bold > bold > qual
< extra_id_0 > m1 m2 m1 m2 m2 m1 m2 m2 m1 m2 m1 m2 m1 m2 m2 m1 m2 m1 m2 m1 m2 m1 m2 m1 m2 m1 m2 m1 m2 m2 m2 m2 m2 m1 m2 m2 .
< extra_id_0 > m1 : m0 and m5 : m0 have significantly better performance than m5 : m0 and m5 : m0 , respectively . m5 : m0 and m5 : m0 have significantly better performance than m5 : m0 and m5 : m0 , respectively . m5 : m0 and m5 : m0 have significantly better performance than m5 : m0 .
< extra_id_0 > m0 and m2 have m0 and m7 , respectively . yelp has m0 and m7 , respectively . semantic preservation a > b and semantic preservation b > a have m0 and m7 , respectively . semantic preservation b > a and semantic preservation b > a have m0 and m7 , respectively .
< extra_id_0 > see text for validation of gm ; see text for validation of acc ; see text for validation of pp ; see text for validation of acc ; see text for validation of gm ; see text for validation of acc ; see text for validation of gm ; see text for validation of acc ; see text for validation of gm ; see text for validation of acc ; see text for validation of acc ; see text for validation of acc ; see text for validation of pp ; see text for validation of acc ;
< extra_id_0 > m5 : m0 has a significantly better performance than m5 : m0 [ italic ] + cyc + para + lang compared to m5 : m0 [ italic ] + cyc + para + lang compared to m5 : m0 [ italic ] + cyc + para + lang compared to m5 : m0 [ italic ] + cyc + para + lang compared to m5 : m0 [ italic ] + cyc + para + lang compared to m6 : m0 [ italic ] + para + lang
< extra_id_0 > bleu and acc , respectively . bleu and acc differ by row because of different definitions of acc . our best models achieve higher bleu than previous work , but untransferred sentences achieve the highest bleu than previous work at similar levels of acc . our best models achieve higher bleu than previous work at similar levels of bleu , but untransferred sentences achieve the highest bleu than previous work at similar levels of acc .
< extra_id_0 > table 2 shows the percentage of reparandum tokens that were correctly predicted as disfluent . reparandum tokens that were correctly predicted as disfluent are shown in table 2 . reparandum tokens that were correctly predicted as disfluent are shown in table 2 . reparandum tokens that were correctly predicted as disfluent are shown in table 2 . reparandum tokens that were correctly predicted as disfluent are shown in table 2 . reparandum tokens that were correctly predicted as disfluent are shown in table 2 .
< extra_id_0 > table 3 shows the relative frequency of rephrases correctly predicted as disfluent for disfluencies that contain a content word in both the reparandum and repair ( content - content ) , either the reparandum or repair ( content - function ) or in neither .
< extra_id_0 > c > [ bold ] dev mean c > [ bold ] test mean c > [ bold ] dev best c > [ italic ] c > [ italic ] c > [ italic ] c > [ italic ] c > [ italic ] c > [ italic ] c > [ italic ] c > [ italic ] c > [ italic ] c > [ italic ] c >
< extra_id_0 > accuracy ( % ) agree c > accuracy ( % ) disagree c > accuracy ( % ) disagree c > accuracy ( % ) disagree c > accuracy ( % ) unrelated c > 81 . 72 c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > c >
< extra_id_0 > table 2 shows the accuracy ( % ) of different methods on the apw and nyt datasets for the document dating problem ( higher is better ) . the unified model significantly outperforms all previous models .
< extra_id_0 > table 3 shows the effectiveness of both word attention and graph attention for this task . this results show the effectiveness of both word attention and graph attention for this task .
< extra_id_0 > 1 / n c > [ bold ] 1 / n c > [ bold ] 1 / n c > [ bold ] 1 / n c > [ bold ] 1 / n c > [ bold ] 1 / n c > [ bold ] all c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c >
< extra_id_0 > [ bold ] identification ( % ) c > [ bold ] trigger [ bold ] identification ( % ) c > [ bold ] trigger [ bold ] identification ( % ) c > [ bold ] trigger [ bold ] classification ( % ) c > [ bold ] classification ( % ) c > [ bold ] classification ( % ) c > [ bold ] classification ( % ) c > [ bold ] classification ( % ) c > [ bold ] identification ( % ) c > [ bold ] identification ( % ) c > [ bold ] identification ( % ) c > [ bold ] identification ( % ) c > [ bold ] identification ( % ) c > [ bold ] c > [ bold ] c > [ bold c > [ bold c > [ bold c > [ bold c > [ bold c > [ bold c > [ bold c > [ bold c > [ bold c > [ bold c > [ bold c > [ bold c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ] c > [ bold ]
< extra_id_0 > wer
< extra_id_0 > table 4 shows the results on the dev set and on the test set using discriminative training with only subsets of the code - switched data . the results on the dev set and on the test set using discriminative training with only subsets of the code - switched data are shown in table 4 .
< extra_id_0 > table 5 : accuracy on the dev set and on the test set , according to the type of the gold sentence in the set : code - switched ( cs ) vs . monolingual ( monolingual ) .
< extra_id_0 > table 7 : precision ( p ) , recall ( r ) and f1 - score ( f ) for using type - aggregated gaze features trained on all three eye - tracking datasets and tested on the conll - 2003 dataset ( * marks statistically significant improvement ) . the conll - 2003 dataset has the highest f1 - score ( p ) , recall ( r ) and f1 - score ( f ) .
< extra_id_0 > table 5 shows precision ( p ) , recall ( r ) and f1 - score ( f ) for using type - aggregated gaze features on the conll - 2003 dataset ( * marks statistically significant improvement ) .
< extra_id_0 > ( full ) is from the original paper , and it uses syntactic skipgram . glove - retro is a glove vector retrofitted by faruqui et al . ( 2015 ) to wordnet 3 . 1 , and glove - extended refers to the syntactic skipgram embeddings obtained by running autoextension rothe and schütze ( 2015 ) .
< extra_id_0 > table 2 shows results from rbg dependency parser with features coming from various pp attachment predictors and oracle attachment predictors . rbg + hpcd ( full ) c > 94 . 17 c > 88 . 51 c > 88 . 51 c > rbg + hpcd ( full ) c > 94 . 17 c > 88 . 51 c > 88 . 51 c > rbg + hpcd ( full
< extra_id_0 > table 3 shows the effect of removing sense priors and context sensitivity ( attention ) from the model . the effect of removing sense priors and context sensitivity is shown in table 3 .
< extra_id_0 > adding subtitle data and domain tuning for image caption translation ( bleu % scores ) . adding subtitle data and domain tuning for image caption translation ( bleu % scores ) . all results with marian amun .
< extra_id_0 > en - fr c > flickr16 c > mscoco17 c > en - fr c > flickr16 c > mscoco17 c > mscoco17 c > en - fr c > flickr16 c > mscoco17 c > mscoco17 c > mscoco17 c > mscoco17 c > c >
< extra_id_0 > en - fr and flickr16 perform better than en - fr and mscoco17 . adding automatic image captioning to flickr16 and mscoco17 performs better than en - fr , flickr16 and mscoco17 . adding automatic image captioning to flickr16 and mscoco17 performs better than en - fr , flickr17 and mscoco17 .
< extra_id_0 > mscoco17 and en - fr c > flickr16 c > flickr17 c > mscoco17 c > en - fr c > flickr16 c > flickr17 c > mscoco17 c > mscoco17 c > mscoco17 c > mscoco17 c > mscoco17 c > mscoco17 c > c >
< extra_id_0 > en - fr c > flickr16 c > mscoco17 c > subs3m [ italic ] [ italic ] lm detectron c > 68 . 30 c > 62 . 45 c > 53 . 06 c > 53 . 06 c > 53 . 06 c > 53 . 06 c > 53 . 06 c > 53 . 06 c > 53 . 06 c > 53 . 11 c > c >
< extra_id_0 > the en - fr - trans - ff scores better than the en - fr - trans - ff scores . the en - fr - trans - ff scores better than the en - fr - trans - ff scores . the en - fr - trans - ff scores better than en - fr - trans - ff scores better than the en - fr - trans - ff scores .
< extra_id_0 > table 1 shows the number of parallel sentences in the train , test and development splits for the language pairs we used . the number of parallel sentences in train , test and development splits for the language pairs we used is shown in table 1 .
< extra_id_0 > 2 : training vocabularies for the english , french and spanish data used for our models . the training vocabularies for the english , french and spanish data are shown in table 2 .
< extra_id_0 > table 5 shows the automatic evaluation scores ( bleu and ter ) for the rev systems . the bleu and ter scores for the rev systems are shown in table 5 .
< extra_id_0 > recall @ 10 ( % ) c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > [ empty ] c > vgs c >
< extra_id_0 > table 1 : results on synthetically spoken coco . the row labeled vgs is the visually supervised model from chrupala2017representations . the row labeled audio2vec - u is the visually supervised model from chrupala2017representations .
< extra_id_0 > turns in a u > screenplay that u > at the edges ; it ’ s so clever you want hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate hate
< extra_id_0 > < extra_id_1 > . bold > rnn / bold > bold > rnn / bold > bold > rnn / bold > bold > rnn / bold > bold > bold > bold > bold > bold > bold > bold > bold > bold > bold > bold > bold > bold > bold > bold >
< extra_id_0 > the numbers indicate the changes in percentage points with respect to the original sentence . the last two rows correspond to the case where negative labels are flipped to positive and vice versa .
< extra_id_0 > n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t n ’ t
